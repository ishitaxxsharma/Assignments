# Step 1: Import Libraries
import pandas as pd
import numpy as np
from sklearn.preprocessing import RobustScaler, LabelEncoder
from scipy.stats import skew

# Step 2: Load Data
train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

# Step 3: Save Test ID & Drop from Data
test_ID = test['Id']
train.drop("Id", axis=1, inplace=True)
test.drop("Id", axis=1, inplace=True)

# Step 4: Combine Train and Test for Uniform Processing
y = train['SalePrice']
train.drop(['SalePrice'], axis=1, inplace=True)
combined = pd.concat([train, test], axis=0)

# Step 5: Handle Missing Values
for col in ['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu']:
    combined[col] = combined[col].fillna("None")

for col in ['GarageType', 'GarageFinish', 'GarageQual', 'GarageYrBlt', 'GarageCond']:
    combined[col] = combined[col].fillna("None")

for col in ['BsmtFinType2', 'BsmtExposure', 'BsmtFinType1', 'BsmtCond', 'BsmtQual']:
    combined[col] = combined[col].fillna("None")

# Numeric missing â†’ median
numeric_cols = combined.select_dtypes(include=[np.number]).columns
for col in numeric_cols:
    combined[col] = combined[col].fillna(combined[col].median())

# Categorical missing â†’ mode
categorical_cols = combined.select_dtypes(include=["object"]).columns
for col in categorical_cols:
    combined[col] = combined[col].fillna(combined[col].mode()[0])

# Step 6: Feature Engineering
combined['TotalSF'] = combined['TotalBsmtSF'] + combined['1stFlrSF'] + combined['2ndFlrSF']
combined['TotalBath'] = (combined['FullBath'] + 0.5*combined['HalfBath'] +
                         combined['BsmtFullBath'] + 0.5*combined['BsmtHalfBath'])
combined['TotalPorchSF'] = (combined['OpenPorchSF'] + combined['EnclosedPorch'] +
                            combined['3SsnPorch'] + combined['ScreenPorch'])
combined['HasPool'] = combined['PoolArea'].apply(lambda x: 1 if x > 0 else 0)
combined['HouseAge'] = combined['YrSold'] - combined['YearBuilt']
combined['RemodAge'] = combined['YrSold'] - combined['YearRemodAdd']
combined['GarageAge'] = combined['YrSold'] - combined['GarageYrBlt'].replace(2207, np.nan)

# Step 7: Ordinal Encoding
qual_map = {'Ex': 5, 'Gd': 4, 'TA': 3, 'Fa': 2, 'Po': 1, 'None': 0}
for col in ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC',
            'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond', 'PoolQC']:
    combined[col] = combined[col].map(qual_map)

# Step 8: Label Encode Remaining Categorical Columns
for col in combined.select_dtypes(include=['object']).columns:
    lbl = LabelEncoder()
    combined[col] = lbl.fit_transform(combined[col].astype(str))

# Step 9: Skewness Correction
numeric_feats = combined.dtypes[combined.dtypes != "object"].index
skewed_feats = combined[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)
skewed_features = skewed_feats[abs(skewed_feats) > 0.75].index

for feat in skewed_features:
    combined[feat] = np.log1p(combined[feat])

# Step 10: Scaling
scaler = RobustScaler()
combined[numeric_feats] = scaler.fit_transform(combined[numeric_feats])

# Step 11: Split Back into Train/Test
ntrain = train.shape[0]
X_train = combined[:ntrain]
X_test = combined[ntrain:]
y_train = np.log1p(y)  # Log-transform target for regression

# Final shape
print("Training Features:", X_train.shape)
print("Test Features:", X_test.shape)
print("Target Shape:", y_train.shape)
